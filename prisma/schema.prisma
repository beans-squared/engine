generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./database.sqlite"
}

model DiscordChannel {
  id                       String                  @id
  name                     String?
  aiNotificationPrompt     String                  @default("Create an announcement for an update to %PROJECT-NAME% on %PROJECT-PLATFORM%. The new version is %VERSION-NAME%, it's a %VERSION-RELEASE-TYPE% release, and the changelog is: %VERSION-CHANGELOG%. Use markdown formatting to highlight important information. Address it as being from %GUILD-NAME%")
  defaultNotificationStyle String                  @default("NORMAL")
  maxChangelogLength       Int                     @default(4000)
  textNotificationTemplate String                  @default("# %PROJECT-NAME% has been updated\n**Changelog:**\n```%VERSION-CHANGELOG%```\n**Version Name:** %VERSION-NAME%\n**Version Number:** %VERSION-NUMBER%\n**Release Type:** %VERSION-RELEASE-TYPE%\n**Date Published:** <t:%VERSION-PUBLISH-DATE%:f>")
  discordGuild             DiscordGuild            @relation(fields: [discordGuildId], references: [id])
  discordGuildId           String
  projects                 DiscordChannelProject[]
}

model DiscordChannelProject {
  id               Int            @id @default(autoincrement())
  project          Project        @relation(references: [id, platform], fields: [projectId, projectPlatform])
  projectId        String
  projectPlatform  String
  discordChannel   DiscordChannel @relation(references: [id], fields: [discordChannelId])
  discordChannelId String
  notifications    Notification[]
}

model DiscordGuild {
  id                       String           @id
  name                     String?
  aiNotificationPrompt     String           @default("Create an announcement for an update to %PROJECT-NAME% on %PROJECT-PLATFORM%. The new version is %VERSION-NAME%, it's a %VERSION-RELEASE-TYPE% release, and the changelog is: %VERSION-CHANGELOG%. Use markdown formatting to highlight important information. Address it as being from %GUILD-NAME%")
  defaultNotificationStyle String           @default("NORMAL")
  maxChangelogLength       Int              @default(4000)
  maxProjects              Int              @default(1000)
  textNotificationTemplate String           @default("# %PROJECT-NAME% has been updated\n**Changelog:**\n```%VERSION-CHANGELOG%```\n**Version Name:** %VERSION-NAME%\n**Version Number:** %VERSION-NUMBER%\n**Release Type:** %VERSION-RELEASE-TYPE%\n**Date Published:** <t:%VERSION-PUBLISH-DATE%:f>")
  DiscordChannel           DiscordChannel[]
}

model DiscordUser {
  id                       String               @id
  username                 String
  aiNotificationPrompt     String               @default("Create an announcement for an update to %PROJECT-NAME% on %PROJECT-PLATFORM%. The new version is %VERSION-NAME%, it's a %VERSION-RELEASE-TYPE% release, and the changelog is: %VERSION-CHANGELOG%. Use markdown formatting to highlight important information. Address it as being from %GUILD-NAME%")
  defaultNotificationStyle String               @default("NORMAL")
  maxChangelogLength       Int                  @default(4000)
  maxProjects              Int                  @default(1000)
  textNotificationTemplate String               @default("# %PROJECT-NAME% has been updated\n**Changelog:**\n```%VERSION-CHANGELOG%```\n**Version Name:** %VERSION-NAME%\n**Version Number:** %VERSION-NUMBER%\n**Release Type:** %VERSION-RELEASE-TYPE%\n**Date Published:** <t:%VERSION-PUBLISH-DATE%:f>")
  DiscordUserProject       DiscordUserProject[]
}

model DiscordUserProject {
  id              Int            @id @default(autoincrement())
  project         Project        @relation(references: [id, platform], fields: [projectId, projectPlatform])
  projectId       String
  projectPlatform String
  discordUser     DiscordUser    @relation(references: [id], fields: [discordUserId])
  discordUserId   String
  notifications   Notification[]
}

model Email {
  id       Int     @id
  email    String  @unique
  verified Boolean @default(false)
  user     User    @relation(fields: [userId], references: [id])
  userId   Int
}

model Notification {
  id                      Int                    @id @default(autoincrement())
  datePosted              DateTime               @default(now())
  // 0 = Pending, 1 = Success, 2 = Failure
  status                  Int                    @default(0)
  message                 String?
  discordChannelProject   DiscordChannelProject? @relation(references: [id], fields: [discordChannelProjectId])
  discordChannelProjectId Int?
  discordUserProject      DiscordUserProject?    @relation(references: [id], fields: [discordUserProjectId])
  discordUserProjectId    Int?
  webhookProject          WebhookProject?        @relation(fields: [webhookProjectId], references: [id])
  webhookProjectId        Int?
}

model Project {
  id              String
  platform        String
  name            String
  gameId          String
  logoUrl         String
  dateUpdated     DateTime
  versions        ProjectVersion[]
  discordChannels DiscordChannelProject[]
  discordUsers    DiscordUserProject[]
  webhooks        WebhookProject[]

  @@id([id, platform])
}

model ProjectVersion {
  id              String
  projectId       String
  projectPlatform String
  datePublished   DateTime
  project         Project  @relation(fields: [projectId, projectPlatform], references: [id, platform])

  @@id([id, projectId, projectPlatform])
}

model User {
  id    Int     @id
  Email Email[]
}

model Webhook {
  id             Int              @id @default(autoincrement())
  payloadUrl     String
  WebhookProject WebhookProject[]
}

model WebhookProject {
  id              Int            @id @default(autoincrement())
  project         Project        @relation(references: [id, platform], fields: [projectId, projectPlatform])
  projectId       String
  projectPlatform String
  webhook         Webhook        @relation(references: [id], fields: [webhookId])
  webhookId       Int
  notifications   Notification[]
}
